[{"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/reportWebVitals.js":"1","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/ApiClient.js":"2","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/EditActivity.js":"3","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/CreateActivity.js":"4","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/ScheduleGrid.js":"5","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/DictionaryList.js":"6","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/Utils.js":"7","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/index.js":"8","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/App.js":"9","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/CreateDictionaryElement.js":"10","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/DeleteDictionaryElement.js":"11","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/EditDictionaryElement.js":"12"},{"size":362,"mtime":1611447720071,"results":"13","hashOfConfig":"14"},{"size":2820,"mtime":1611544846275,"results":"15","hashOfConfig":"14"},{"size":6357,"mtime":1611544088365,"results":"16","hashOfConfig":"14"},{"size":3962,"mtime":1611546358625,"results":"17","hashOfConfig":"14"},{"size":3918,"mtime":1611534489477,"results":"18","hashOfConfig":"14"},{"size":2467,"mtime":1611543741127,"results":"19","hashOfConfig":"14"},{"size":515,"mtime":1611447720071,"results":"20","hashOfConfig":"14"},{"size":500,"mtime":1611447720071,"results":"21","hashOfConfig":"14"},{"size":2539,"mtime":1611542252354,"results":"22","hashOfConfig":"14"},{"size":1563,"mtime":1611596027746,"results":"23","hashOfConfig":"14"},{"size":1947,"mtime":1611546255086,"results":"24","hashOfConfig":"14"},{"size":2651,"mtime":1611596039917,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"8e1iml",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/reportWebVitals.js",[],["53","54"],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/ApiClient.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/EditActivity.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/CreateActivity.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/ScheduleGrid.js",["55"],"import Button from 'react-bootstrap/Button'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Link, useParams, useHistory\n} from \"react-router-dom\";\nimport Utils from './Utils.js';\nimport ApiClient from './ApiClient.js';\n\n\nfunction Days() {\n    return (\n        <tr>\n            <td>\n                <Button key=\"time\" className=\"btn btn-light btn-block\">time</Button>\n            </td>\n            {Utils.terms.days.map(dayId => (\n                <td>\n                    <Button key={dayId} className=\"btn btn-light btn-block\">{dayId}</Button>\n                </td>\n            ))}\n        </tr>\n    );\n}\n\nfunction ScheduleButtons(props) {\n    const [scheduleData, setScheduleData] = useState({ slots: [], name: '', type: '' });\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await ApiClient.getSchedule(props.type, props.name);\n            setScheduleData(result);\n        };\n        fetchData();\n    }, [props.name, props.type]);\n    return (\n        <>\n            {Utils.range(0, 8).map(i => (\n                <tr>\n                    <td>\n                        <Button key={'term' + i.toString()} className=\"btn btn-light btn-block\">{Utils.terms.hours[i]}</Button>\n                    </td>\n                    {scheduleData.slots.slice(i * 5, i * 5 + 5).map((slot, index) => {\n                        if (slot.id === null) {\n                            return (\n                                <td>\n                                    <Link to={\"/create/\" + scheduleData.type + \"/\" + scheduleData.name + \"/\" + (i * 5 + index).toString()}>\n                                        <Button key={i * 5 + index} className=\"btn btn-secondary btn-block\"> {slot.title} </Button>\n                                    </Link>\n                                </td>\n                            )\n                        }\n                        else {\n                            return (\n                                <td>\n                                    <Link to={\"/edit/\" + scheduleData.type + \"/\" + scheduleData.name + \"/\" + slot.id + \"/\" + (i * 5 + index).toString()}>\n                                        <Button key={i * 5 + index} className=\"btn btn-secondary btn-block\"> {slot.title} </Button>\n                                    </Link>\n                                </td>\n                            )\n\n                        }\n                    })}\n                </tr>\n            ))}\n        </>\n    );\n}\n\n\nfunction ScheduleGrid(props) {\n    let { searchName } = useParams();\n    const [value, setValue] = useState(searchName);\n    const history = useHistory();\n    const handleSelect = (e) => {\n        setValue(e);\n        history.push(\"/\" + props.type + \"/\" + e);\n    }\n    const [dictionaryList, setDictionaryList] = useState({ nameList: [] });\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await ApiClient.getDictionary(props.type);\n            setDictionaryList({ nameList: result });\n        };\n        fetchData();\n    }, []);\n    return (\n        <div>\n\n            <DropdownButton\n                alignRight\n                title={value}\n                id=\"dropdown-menu-align-right\"\n                onSelect={handleSelect}>\n                {dictionaryList.nameList.map(item => (\n                    <Dropdown.Item eventKey={item.name}>{item.name}</Dropdown.Item>\n                ))}\n            </DropdownButton>\n\n            <br></br>\n            <table className=\"table\">\n                <tbody>\n\n                    <Days></Days>\n                    <ScheduleButtons type={props.type} name={searchName}></ScheduleButtons>\n                </tbody>\n            </table>\n        </div>\n\n    );\n}\nexport default ScheduleGrid;\n","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/DictionaryList.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/Utils.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/index.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/App.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/CreateDictionaryElement.js",["56","57","58"],"import React, { useState, useEffect } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { useForm } from \"react-hook-form\";\nimport {\n    useParams,\n    useHistory, Link\n} from \"react-router-dom\";\nimport Utils from './Utils.js';\nimport ApiClient from './ApiClient.js';\n\n\nfunction CreateDictionaryElement() {\n    let { type } = useParams();\n    const { register, handleSubmit } = useForm();\n    const history = useHistory();\n\n\n    const onSubmit = async (data) => {\n        const result = await ApiClient.createDictionaryElement(type, data);\n        if (result.status === 200)\n            history.push(\"/dictionaries/\" + type)\n    }\n    return (\n        <div class=\"col-md-4\">\n            <label>{\"Create \" + type}</label>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-group\">\n                    <label>\n                        Name:\n                    <input className=\"form-control\" name=\"Name\" ref={register({ required: true })} />\n                    </label>\n                </div>\n                <div className=\"form-group\">\n                    <label>\n                        Comment:\n                    <input className=\"form-control\" type=\"textarea\" name=\"Comment\" ref={register} />\n                    </label>\n                </div>\n                <input className=\"btn btn-primary\" value=\"Save\" type=\"submit\" />\n            </form>\n            <Link to={\"/dictionaries/\" + type} className=\"App-link\">Back to list</Link>\n        </div>\n    );\n\n}\nexport default CreateDictionaryElement;\n\n\n","/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/DeleteDictionaryElement.js",[],"/home/mateusz/Documents/Projects/C#/school-scheduler/SchoolScheduler/ClientApp/client-app/src/components/EditDictionaryElement.js",["59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":87,"column":8,"nodeType":"66","endLine":87,"endColumn":10,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":25},{"ruleId":"68","severity":1,"message":"72","line":1,"column":27,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"73","line":8,"column":8,"nodeType":"70","messageId":"71","endLine":8,"endColumn":13},{"ruleId":"64","severity":1,"message":"74","line":29,"column":8,"nodeType":"66","endLine":29,"endColumn":10,"suggestions":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.type'. Either include it or remove the dependency array.","ArrayExpression",["78"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Utils' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'type'. Either include them or remove the dependency array.",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [props.type]",{"range":"84","text":"85"},"Update the dependencies array to be: [id, type]",{"range":"86","text":"87"},[3211,3213],"[props.type]",[754,756],"[id, type]"]